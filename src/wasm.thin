// Control flow operators
const WASM_OPCODE_NOP: byte = 0;
const WASM_OPCODE_BLOCK: byte = 1;
const WASM_OPCODE_LOOP: byte = 2;
const WASM_OPCODE_IF: byte = 3;
const WASM_OPCODE_ELSE: byte = 4;
const WASM_OPCODE_SELECT: byte = 5;
const WASM_OPCODE_BR: byte = 6;
const WASM_OPCODE_BR_IF: byte = 7;
const WASM_OPCODE_BR_TABLE: byte = 8;
const WASM_OPCODE_RETURN: byte = 9;
const WASM_OPCODE_UNREACHABLE: byte = 10;
const WASM_OPCODE_END: byte = 15;

// Basic operators
const WASM_OPCODE_I32_CONST: byte = 16;
const WASM_OPCODE_I64_CONST: byte = 17;
const WASM_OPCODE_F64_CONST: byte = 18;
const WASM_OPCODE_F32_CONST: byte = 19;
const WASM_OPCODE_GET_LOCAL: byte = 20;
const WASM_OPCODE_SET_LOCAL: byte = 21;
const WASM_OPCODE_CALL: byte = 22;
const WASM_OPCODE_CALL_INDIRECT: byte = 23;
const WASM_OPCODE_CALL_IMPORT: byte = 24;

// Memory-related operators
const WASM_OPCODE_I32_LOAD8_S: byte = 32;
const WASM_OPCODE_I32_LOAD8_U: byte = 33;
const WASM_OPCODE_I32_LOAD16_S: byte = 34;
const WASM_OPCODE_I32_LOAD16_U: byte = 35;
const WASM_OPCODE_I64_LOAD8_S: byte = 36;
const WASM_OPCODE_I64_LOAD8_U: byte = 37;
const WASM_OPCODE_I64_LOAD16_S: byte = 38;
const WASM_OPCODE_I64_LOAD16_U: byte = 39;
const WASM_OPCODE_I64_LOAD32_S: byte = 40;
const WASM_OPCODE_I64_LOAD32_U: byte = 41;
const WASM_OPCODE_I32_LOAD: byte = 42;
const WASM_OPCODE_I64_LOAD: byte = 43;
const WASM_OPCODE_F32_LOAD: byte = 44;
const WASM_OPCODE_F64_LOAD: byte = 45;
const WASM_OPCODE_I32_STORE8: byte = 46;
const WASM_OPCODE_I32_STORE16: byte = 47;
const WASM_OPCODE_I64_STORE8: byte = 48;
const WASM_OPCODE_I64_STORE16: byte = 49;
const WASM_OPCODE_I64_STORE32: byte = 50;
const WASM_OPCODE_I32_STORE: byte = 51;
const WASM_OPCODE_I64_STORE: byte = 52;
const WASM_OPCODE_F32_STORE: byte = 53;
const WASM_OPCODE_F64_STORE: byte = 54;
const WASM_OPCODE_CURRENT_MEMORY: byte = 59;
const WASM_OPCODE_GROW_MEMORY: byte = 57;

// Simple operators
const WASM_OPCODE_I32_ADD: byte = 64;
const WASM_OPCODE_I32_SUB: byte = 65;
const WASM_OPCODE_I32_MUL: byte = 66;
const WASM_OPCODE_I32_DIV_S: byte = 67;
const WASM_OPCODE_I32_DIV_U: byte = 68;
const WASM_OPCODE_I32_REM_S: byte = 69;
const WASM_OPCODE_I32_REM_U: byte = 70;
const WASM_OPCODE_I32_AND: byte = 71;
const WASM_OPCODE_I32_OR: byte = 72;
const WASM_OPCODE_I32_XOR: byte = 73;
const WASM_OPCODE_I32_SHL: byte = 74;
const WASM_OPCODE_I32_SHR_U: byte = 75;
const WASM_OPCODE_I32_SHR_S: byte = 76;
const WASM_OPCODE_I32_ROTR: byte = 182;
const WASM_OPCODE_I32_ROTL: byte = 183;
const WASM_OPCODE_I32_EQ: byte = 77;
const WASM_OPCODE_I32_NE: byte = 78;
const WASM_OPCODE_I32_LT_S: byte = 79;
const WASM_OPCODE_I32_LE_S: byte = 80;
const WASM_OPCODE_I32_LT_U: byte = 81;
const WASM_OPCODE_I32_LE_U: byte = 82;
const WASM_OPCODE_I32_GT_S: byte = 83;
const WASM_OPCODE_I32_GE_S: byte = 84;
const WASM_OPCODE_I32_GT_U: byte = 85;
const WASM_OPCODE_I32_GE_U: byte = 86;
const WASM_OPCODE_I32_CLZ: byte = 87;
const WASM_OPCODE_I32_CTZ: byte = 88;
const WASM_OPCODE_I32_POPCNT: byte = 89;
const WASM_OPCODE_I32_EQZ: byte = 90;
const WASM_OPCODE_I64_ADD: byte = 91;
const WASM_OPCODE_I64_SUB: byte = 92;
const WASM_OPCODE_I64_MUL: byte = 93;
const WASM_OPCODE_I64_DIV_S: byte = 94;
const WASM_OPCODE_I64_DIV_U: byte = 95;
const WASM_OPCODE_I64_REM_S: byte = 96;
const WASM_OPCODE_I64_REM_U: byte = 97;
const WASM_OPCODE_I64_AND: byte = 98;
const WASM_OPCODE_I64_OR: byte = 99;
const WASM_OPCODE_I64_XOR: byte = 100;
const WASM_OPCODE_I64_SHL: byte = 101;
const WASM_OPCODE_I64_SHR_U: byte = 102;
const WASM_OPCODE_I64_SHR_S: byte = 103;
const WASM_OPCODE_I64_ROTR: byte = 184;
const WASM_OPCODE_I64_ROTL: byte = 185;
const WASM_OPCODE_I64_EQ: byte = 104;
const WASM_OPCODE_I64_NE: byte = 105;
const WASM_OPCODE_I64_LT_S: byte = 106;
const WASM_OPCODE_I64_LE_S: byte = 107;
const WASM_OPCODE_I64_LT_U: byte = 108;
const WASM_OPCODE_I64_LE_U: byte = 109;
const WASM_OPCODE_I64_GT_S: byte = 110;
const WASM_OPCODE_I64_GE_S: byte = 111;
const WASM_OPCODE_I64_GT_U: byte = 112;
const WASM_OPCODE_I64_GE_U: byte = 113;
const WASM_OPCODE_I64_CLZ: byte = 114;
const WASM_OPCODE_I64_CTZ: byte = 115;
const WASM_OPCODE_I64_POPCNT: byte = 116;
const WASM_OPCODE_I64_EQZ: byte = 186;
const WASM_OPCODE_F32_ADD: byte = 117;
const WASM_OPCODE_F32_SUB: byte = 118;
const WASM_OPCODE_F32_MUL: byte = 119;
const WASM_OPCODE_F32_DIV: byte = 120;
const WASM_OPCODE_F32_MIN: byte = 121;
const WASM_OPCODE_F32_MAX: byte = 122;
const WASM_OPCODE_F32_ABS: byte = 123;
const WASM_OPCODE_F32_NEG: byte = 124;
const WASM_OPCODE_F32_COPYSIGN: byte = 125;
const WASM_OPCODE_F32_CEIL: byte = 126;
const WASM_OPCODE_F32_FLOOR: byte = 127;
const WASM_OPCODE_F32_TRUNC: byte = 128;
const WASM_OPCODE_F32_NEAREST: byte = 129;
const WASM_OPCODE_F32_SQRT: byte = 130;
const WASM_OPCODE_F32_EQ: byte = 131;
const WASM_OPCODE_F32_NE: byte = 132;
const WASM_OPCODE_F32_LT: byte = 133;
const WASM_OPCODE_F32_LE: byte = 134;
const WASM_OPCODE_F32_GT: byte = 135;
const WASM_OPCODE_F32_GE: byte = 136;
const WASM_OPCODE_F64_ADD: byte = 137;
const WASM_OPCODE_F64_SUB: byte = 138;
const WASM_OPCODE_F64_MUL: byte = 139;
const WASM_OPCODE_F64_DIV: byte = 140;
const WASM_OPCODE_F64_MIN: byte = 141;
const WASM_OPCODE_F64_MAX: byte = 142;
const WASM_OPCODE_F64_ABS: byte = 143;
const WASM_OPCODE_F64_NEG: byte = 144;
const WASM_OPCODE_F64_COPYSIGN: byte = 145;
const WASM_OPCODE_F64_CEIL: byte = 146;
const WASM_OPCODE_F64_FLOOR: byte = 147;
const WASM_OPCODE_F64_TRUNC: byte = 148;
const WASM_OPCODE_F64_NEAREST: byte = 149;
const WASM_OPCODE_F64_SQRT: byte = 150;
const WASM_OPCODE_F64_EQ: byte = 151;
const WASM_OPCODE_F64_NE: byte = 152;
const WASM_OPCODE_F64_LT: byte = 153;
const WASM_OPCODE_F64_LE: byte = 154;
const WASM_OPCODE_F64_GT: byte = 155;
const WASM_OPCODE_F64_GE: byte = 156;
const WASM_OPCODE_I32_TRUNC_S_F32: byte = 157;
const WASM_OPCODE_I32_TRUNC_S_F64: byte = 158;
const WASM_OPCODE_I32_TRUNC_U_F32: byte = 159;
const WASM_OPCODE_I32_TRUNC_U_F64: byte = 160;
const WASM_OPCODE_I32_WRAP_I64: byte = 161;
const WASM_OPCODE_I64_TRUNC_S_F32: byte = 162;
const WASM_OPCODE_I64_TRUNC_S_F64: byte = 163;
const WASM_OPCODE_I64_TRUNC_U_F32: byte = 164;
const WASM_OPCODE_I64_TRUNC_U_F64: byte = 165;
const WASM_OPCODE_I64_EXTEND_S_I32: byte = 166;
const WASM_OPCODE_I64_EXTEND_U_I32: byte = 167;
const WASM_OPCODE_F32_CONVERT_S_I32: byte = 168;
const WASM_OPCODE_F32_CONVERT_U_I32: byte = 169;
const WASM_OPCODE_F32_CONVERT_S_I64: byte = 170;
const WASM_OPCODE_F32_CONVERT_U_I64: byte = 171;
const WASM_OPCODE_F32_DEMOTE_F64: byte = 172;
const WASM_OPCODE_F32_REINTERPRET_I32: byte = 173;
const WASM_OPCODE_F64_CONVERT_S_I32: byte = 174;
const WASM_OPCODE_F64_CONVERT_U_I32: byte = 175;
const WASM_OPCODE_F64_CONVERT_S_I64: byte = 176;
const WASM_OPCODE_F64_CONVERT_U_I64: byte = 177;
const WASM_OPCODE_F64_PROMOTE_F32: byte = 178;
const WASM_OPCODE_F64_REINTERPRET_I64: byte = 179;
const WASM_OPCODE_I32_REINTERPRET_F32: byte = 180;
const WASM_OPCODE_I64_REINTERPRET_F64: byte = 181;

const WASM_MAGIC = '\0' | 'a' << 8 | 's' << 16 | 'm' << 24;
const WASM_VERSION = 11;
const WASM_SIZE_IN_PAGES = 256;
const WASM_MEMORY_INITIALIZER_BASE = 8; // Leave space for "null"
const WASM_TYPE_FORM_FUNCTION = 64;

enum WasmType {
  VOID = 0,
  I32 = 1,
  I64 = 2,
  F32 = 3,
  F64 = 4,
}

class WasmWrappedType {
  id: WasmType;
  next: WasmWrappedType;
}

class WasmSignature {
  argumentTypes: WasmWrappedType;
  returnType: WasmWrappedType;
  next: WasmSignature;
}

function wasmAreSignaturesEqual(a: WasmSignature, b: WasmSignature): bool {
  assert(a.returnType != null);
  assert(b.returnType != null);
  assert(a.returnType.next == null);
  assert(b.returnType.next == null);

  var x = a.argumentTypes;
  var y = b.argumentTypes;

  while (x != null && y != null) {
    if (x.id != y.id) {
      return false;
    }

    x = x.next;
    y = y.next;
  }

  if (x != null || y != null) {
    return false;
  }

  if (a.returnType.id != b.returnType.id) {
    return false;
  }

  return true;
}

class WasmFunction {
  symbol: Symbol;
  signatureIndex: int;
  isExported: bool;
  intLocalCount: int;
  next: WasmFunction;
}

class WasmImport {
  signatureIndex: int;
  module: string;
  name: string;
  next: WasmImport;
}

class WasmModule {
  firstImport: WasmImport;
  lastImport: WasmImport;
  importCount: int;

  firstFunction: WasmFunction;
  lastFunction: WasmFunction;
  functionCount: int;

  firstSignature: WasmSignature;
  lastSignature: WasmSignature;
  signatureCount: int;

  memoryInitializer: ByteArray;
  currentHeapPointer: int;
  originalHeapPointer: int;
  mallocFunctionIndex: int;
  context: CheckContext;

  growMemoryInitializer(): void {
    var array = this.memoryInitializer;
    var current = array.length();
    var length = this.context.nextGlobalVariableOffset;

    while (current < length) {
      array.append(0);
      current = current + 1;
    }
  }

  allocateImport(signatureIndex: int, mod: string, name: string): WasmImport {
    var result = new WasmImport();
    result.signatureIndex = signatureIndex;
    result.module = mod;
    result.name = name;

    if (this.firstImport == null) this.firstImport = result;
    else this.lastImport.next = result;
    this.lastImport = result;

    this.importCount = this.importCount + 1;
    return result;
  }

  allocateFunction(symbol: Symbol, signatureIndex: int): WasmFunction {
    var fn = new WasmFunction();
    fn.symbol = symbol;
    fn.signatureIndex = signatureIndex;

    if (this.firstFunction == null) this.firstFunction = fn;
    else this.lastFunction.next = fn;
    this.lastFunction = fn;

    this.functionCount = this.functionCount + 1;
    return fn;
  }

  allocateSignature(argumentTypes: WasmWrappedType, returnType: WasmWrappedType): int {
    assert(returnType != null);
    assert(returnType.next == null);

    var signature = new WasmSignature();
    signature.argumentTypes = argumentTypes;
    signature.returnType = returnType;

    var check = this.firstSignature;
    var i = 0;

    while (check != null) {
      if (wasmAreSignaturesEqual(signature, check)) {
        return i;
      }

      check = check.next;
      i = i + 1;
    }

    if (this.firstSignature == null) this.firstSignature = signature;
    else this.lastSignature.next = signature;
    this.lastSignature = signature;

    this.signatureCount = this.signatureCount + 1;
    return i;
  }

  emitModule(array: ByteArray): void {
    ByteArray_append32(array, WASM_MAGIC);
    ByteArray_append32(array, WASM_VERSION);

    this.emitSignatures(array);
    this.emitImportTable(array);
    this.emitFunctionSignatures(array);
    this.emitMemory(array);
    this.emitExportTable(array);
    this.emitFunctionBodies(array);
    this.emitDataSegments(array);
    this.emitNames(array);
  }

  emitSignatures(array: ByteArray): void {
    var section = wasmStartSection(array, "type");
    wasmWriteVarUnsigned(array, this.signatureCount);

    var signature = this.firstSignature;
    while (signature != null) {
      var count = 0;
      var type = signature.argumentTypes;

      while (type != null) {
        count = count + 1;
        type = type.next;
      }

      array.append(WASM_TYPE_FORM_FUNCTION);
      wasmWriteVarUnsigned(array, count);

      type = signature.argumentTypes;
      while (type != null) {
        wasmWriteVarUnsigned(array, type.id as int);
        type = type.next;
      }

      if (signature.returnType.id != WasmType.VOID) {
        array.append(1);
        wasmWriteVarUnsigned(array, signature.returnType.id as int);
      } else {
        array.append(0);
      }

      signature = signature.next;
    }

    wasmFinishSection(array, section);
  }

  emitImportTable(array: ByteArray): void {
    if (this.firstImport == null) {
      return;
    }

    var section = wasmStartSection(array, "import");
    wasmWriteVarUnsigned(array, this.importCount);

    var current = this.firstImport;
    while (current != null) {
      wasmWriteVarUnsigned(array, current.signatureIndex);
      wasmWriteLengthPrefixedASCII(array, current.module);
      wasmWriteLengthPrefixedASCII(array, current.name);
      current = current.next;
    }

    wasmFinishSection(array, section);
  }

  emitFunctionSignatures(array: ByteArray): void {
    if (this.firstFunction == null) {
      return;
    }

    var section = wasmStartSection(array, "function");
    wasmWriteVarUnsigned(array, this.functionCount);

    var fn = this.firstFunction;
    while (fn != null) {
      wasmWriteVarUnsigned(array, fn.signatureIndex);
      fn = fn.next;
    }

    wasmFinishSection(array, section);
  }

  emitMemory(array: ByteArray): void {
    var section = wasmStartSection(array, "memory");
    wasmWriteVarUnsigned(array, WASM_SIZE_IN_PAGES);
    wasmWriteVarUnsigned(array, WASM_SIZE_IN_PAGES);
    wasmWriteVarUnsigned(array, 1); // The memory array is exported
    wasmFinishSection(array, section);
  }

  emitExportTable(array: ByteArray): void {
    var exportedCount = 0;
    var fn = this.firstFunction;
    while (fn != null) {
      if (fn.isExported) {
        exportedCount = exportedCount + 1;
      }
      fn = fn.next;
    }
    if (exportedCount == 0) {
      return;
    }

    var section = wasmStartSection(array, "export");
    wasmWriteVarUnsigned(array, exportedCount);

    var i = 0;
    fn = this.firstFunction;
    while (fn != null) {
      if (fn.isExported) {
        wasmWriteVarUnsigned(array, i);
        wasmWriteLengthPrefixedASCII(array, fn.symbol.name);
      }
      fn = fn.next;
      i = i + 1;
    }

    wasmFinishSection(array, section);
  }

  emitFunctionBodies(array: ByteArray): void {
    if (this.firstFunction == null) {
      return;
    }

    var section = wasmStartSection(array, "code");
    wasmWriteVarUnsigned(array, this.functionCount);

    var fn = this.firstFunction;
    while (fn != null) {
      var bodyLength = array.length();
      wasmWriteVarUnsigned(array, ~0); // This will be patched later

      if (fn.intLocalCount > 0) {
        wasmWriteVarUnsigned(array, 1);
        wasmWriteVarUnsigned(array, fn.intLocalCount);
        array.append(WasmType.I32);
      } else {
        wasmWriteVarUnsigned(array, 0);
      }

      var child = fn.symbol.node.functionBody().firstChild;
      while (child != null) {
        this.emitNode(array, child);
        child = child.nextSibling;
      }

      wasmPatchVarUnsigned(array, bodyLength, array.length() - bodyLength - 5, ~0);
      fn = fn.next;
    }

    wasmFinishSection(array, section);
  }

  emitDataSegments(array: ByteArray): void {
    this.growMemoryInitializer();
    var memoryInitializer = this.memoryInitializer;
    var initializerLength = memoryInitializer.length();
    var initialHeapPointer = alignToNextMultipleOf(WASM_MEMORY_INITIALIZER_BASE + initializerLength, 8);

    // Pass the initial heap pointer to the "malloc" function
    ByteArray_set32(memoryInitializer, this.currentHeapPointer, initialHeapPointer);
    ByteArray_set32(memoryInitializer, this.originalHeapPointer, initialHeapPointer);

    var section = wasmStartSection(array, "data");

    // This only writes one single section containing everything
    wasmWriteVarUnsigned(array, 1);

    // Emit the range of the memory initializer
    wasmWriteVarUnsigned(array, WASM_MEMORY_INITIALIZER_BASE);
    wasmWriteVarUnsigned(array, initializerLength);

    // Copy the entire memory initializer (also includes zero-initialized data for now)
    var i = 0;
    while (i < initializerLength) {
      array.append(memoryInitializer.get(i));
      i = i + 1;
    }

    wasmFinishSection(array, section);
  }

  emitNames(array: ByteArray): void {
    var section = wasmStartSection(array, "name");
    wasmWriteVarUnsigned(array, this.functionCount);

    var fn = this.firstFunction;
    while (fn != null) {
      var name = fn.symbol.name;
      if (fn.symbol.kind == SymbolKind.FUNCTION_INSTANCE) {
        name = StringBuilder_new()
          .append(fn.symbol.parent().name)
          .appendChar('.')
          .append(name)
          .finish();
      }
      wasmWriteLengthPrefixedASCII(array, name);
      wasmWriteVarUnsigned(array, 0); // No local variables for now
      fn = fn.next;
    }

    wasmFinishSection(array, section);
  }

  prepareToEmit(node: Node): void {
    if (node.kind == NodeKind.STRING) {
      var text = node.stringValue;
      var length = text.length;
      var offset = this.context.allocateGlobalVariableOffset(length * 2 + 4, 4);
      node.intValue = offset;
      this.growMemoryInitializer();
      var memoryInitializer = this.memoryInitializer;

      // Emit a length-prefixed string
      ByteArray_set32(memoryInitializer, offset, length);
      ByteArray_setString(memoryInitializer, offset + 4, text);
    }

    else if (node.kind == NodeKind.VARIABLE) {
      var symbol = node.symbol;

      if (symbol.kind == SymbolKind.VARIABLE_GLOBAL) {
        var sizeOf = symbol.resolvedType.variableSizeOf(this.context);
        var value = symbol.node.variableValue().intValue;
        var memoryInitializer = this.memoryInitializer;

        // Copy the initial value into the memory initializer
        this.growMemoryInitializer();
        if (sizeOf == 1) memoryInitializer.set(symbol.offset, value as byte);
        else if (sizeOf == 2) ByteArray_set16(memoryInitializer, symbol.offset, value);
        else if (sizeOf == 4) ByteArray_set32(memoryInitializer, symbol.offset, value);
        else assert(false);

        // Make sure the heap offset is tracked
        if (symbol.name == "currentHeapPointer") {
          assert(this.currentHeapPointer == -1);
          this.currentHeapPointer = symbol.offset;
        }

        // Make sure the heap offset is tracked
        else if (symbol.name == "originalHeapPointer") {
          assert(this.originalHeapPointer == -1);
          this.originalHeapPointer = symbol.offset;
        }
      }
    }

    else if (node.kind == NodeKind.FUNCTION) {
      var returnType = node.functionReturnType();
      var shared = new WasmSharedOffset();
      var argumentTypesFirst: WasmWrappedType = null;
      var argumentTypesLast: WasmWrappedType = null;

      // Make sure to include the implicit "this" variable as a normal argument
      var argument = node.functionFirstArgument();
      while (argument != returnType) {
        var type = wasmWrapType(this.getWasmType(argument.variableType().resolvedType));

        if (argumentTypesFirst == null) argumentTypesFirst = type;
        else argumentTypesLast.next = type;
        argumentTypesLast = type;

        shared.nextLocalOffset = shared.nextLocalOffset + 1;
        argument = argument.nextSibling;
      }
      var signatureIndex = this.allocateSignature(argumentTypesFirst, wasmWrapType(this.getWasmType(returnType.resolvedType)));
      var body = node.functionBody();
      var symbol = node.symbol;

      // Functions without bodies are imports
      if (body == null) {
        var moduleName = symbol.kind == SymbolKind.FUNCTION_INSTANCE ? symbol.parent().name : "global";
        symbol.offset = this.importCount;
        this.allocateImport(signatureIndex, moduleName, symbol.name);
        node = node.nextSibling;
        return;
      }

      symbol.offset = this.functionCount;
      var fn = this.allocateFunction(symbol, signatureIndex);

      // Make sure "malloc" is tracked
      if (symbol.kind == SymbolKind.FUNCTION_GLOBAL && symbol.name == "malloc") {
        assert(this.mallocFunctionIndex == -1);
        this.mallocFunctionIndex = symbol.offset;
      }

      // Only export "extern" functions
      if (node.isExtern()) {
        fn.isExported = true;
      }

      // Assign local variable offsets
      wasmAssignLocalVariableOffsets(body, shared);
      fn.intLocalCount = shared.intLocalCount;
    }

    var child = node.firstChild;
    while (child != null) {
      this.prepareToEmit(child);
      child = child.nextSibling;
    }
  }

  emitBinaryExpression(array: ByteArray, node: Node, opcode: byte): void {
    this.emitNode(array, node.binaryLeft());
    this.emitNode(array, node.binaryRight());
    array.append(opcode);
  }

  emitLoadFromMemory(array: ByteArray, type: Type, relativeBase: Node, offset: int): void {

    // Relative address
    if (relativeBase != null) {
      this.emitNode(array, relativeBase);
    }

    // Absolute address
    else {
      array.append(WASM_OPCODE_I32_CONST);
      wasmWriteVarUnsigned(array, 0);
    }
    var sizeOf = type.variableSizeOf(this.context);

    if (sizeOf == 1) {
      array.append(type.isUnsigned() ? WASM_OPCODE_I32_LOAD8_U : WASM_OPCODE_I32_LOAD8_S);
      wasmWriteVarUnsigned(array, 0);
    }

    else if (sizeOf == 2) {
      array.append(type.isUnsigned() ? WASM_OPCODE_I32_LOAD16_U : WASM_OPCODE_I32_LOAD16_S);
      wasmWriteVarUnsigned(array, 1);
    }

    else if (sizeOf == 4) {
      array.append(WASM_OPCODE_I32_LOAD);
      wasmWriteVarUnsigned(array, 2);
    }

    else {
      assert(false);
    }

    wasmWriteVarUnsigned(array, offset);
  }

  emitStoreToMemory(array: ByteArray, type: Type, relativeBase: Node, offset: int, value: Node): void {
    // Relative address
    if (relativeBase != null) {
      this.emitNode(array, relativeBase);
    }

    // Absolute address
    else {
      array.append(WASM_OPCODE_I32_CONST);
      wasmWriteVarUnsigned(array, 0);
    }

    this.emitNode(array, value);

    var sizeOf = type.variableSizeOf(this.context);

    if (sizeOf == 1) {
      array.append(WASM_OPCODE_I32_STORE8);
      wasmWriteVarUnsigned(array, 0);
    }

    else if (sizeOf == 2) {
      array.append(WASM_OPCODE_I32_STORE16);
      wasmWriteVarUnsigned(array, 1);
    }

    else if (sizeOf == 4) {
      array.append(WASM_OPCODE_I32_STORE);
      wasmWriteVarUnsigned(array, 2);
    }

    else {
      assert(false);
    }

    wasmWriteVarUnsigned(array, offset);
  }

  emitNode(array: ByteArray, node: Node): void {
    assert(!isExpression(node) || node.resolvedType != null);

    if (node.kind == NodeKind.BLOCK) {
      array.append(WASM_OPCODE_BLOCK);
      var child = node.firstChild;
      while (child != null) {
        this.emitNode(array, child);
        child = child.nextSibling;
      }
      array.append(WASM_OPCODE_END);
    }

    else if (node.kind == NodeKind.WHILE) {
      var value = node.whileValue();
      var body = node.whileBody();

      // Ignore "while (false) { ... }"
      if (value.kind == NodeKind.BOOL && value.intValue == 0) {
        return;
      }

      array.append(WASM_OPCODE_LOOP);

      // Emit the condition as "loop { if (!condition) break; }" as long as it's not a "while (true)" loop
      if (value.kind != NodeKind.BOOL) {
        this.emitNode(array, value);
        array.append(WASM_OPCODE_I32_EQZ); // The conditional is flipped
        array.append(WASM_OPCODE_BR_IF);
        array.append(0); // This is a statement, not an expression
        wasmWriteVarUnsigned(array, 1); // Break out of the immediately enclosing loop
      }

      var child = body.firstChild;
      while (child != null) {
        this.emitNode(array, child);
        child = child.nextSibling;
      }

      // Jump back to the top (this doesn't happen automatically)
      array.append(WASM_OPCODE_BR);
      array.append(0); // This is a statement, not an expression
      wasmWriteVarUnsigned(array, 0); // Continue back to the immediately enclosing loop
      array.append(WASM_OPCODE_END);
    }

    else if (node.kind == NodeKind.BREAK || node.kind == NodeKind.CONTINUE) {
      var label = 0;
      var parent = node.parent;
      var child = node;

      while (parent != null && parent.kind != NodeKind.WHILE) {
        // WASM_OPCODE_BLOCK introduces a new label scope, as well as
        // WASM_OPCODE_IF in the left and right branches.
        if (parent.kind == NodeKind.BLOCK) {
          label = label + 1;
        } else if (parent.kind == NodeKind.IF && parent.ifValue() != child) {
          label = label + 1;
        } else if (parent.kind == NodeKind.HOOK && parent.hookValue() != child) {
          label = label + 1;
        } else if (parent.kind == NodeKind.LOGICAL_AND && parent.binaryLeft() != child) {
          label = label + 1;
        } else if (parent.kind == NodeKind.LOGICAL_OR && parent.binaryLeft() != child) {
          label = label + 1;
        }
        parent = parent.parent;
        child = child.parent;
      }

      assert(label > 0);
      array.append(WASM_OPCODE_BR);
      array.append(0); // This is a statement, not an expression
      wasmWriteVarUnsigned(array, label - (node.kind == NodeKind.BREAK ? 0 : 1));
    }

    else if (node.kind == NodeKind.EMPTY) {
      return;
    }

    else if (node.kind == NodeKind.EXPRESSION) {
      this.emitNode(array, node.expressionValue());
    }

    else if (node.kind == NodeKind.RETURN) {
      var value = node.returnValue();
      if (value != null) {
        this.emitNode(array, value);
        array.append(WASM_OPCODE_RETURN);
        array.append(1);
      } else {
        array.append(WASM_OPCODE_RETURN);
        array.append(0);
      }
    }

    else if (node.kind == NodeKind.VARIABLES) {
      var child = node.firstChild;
      while (child != null) {
        assert(child.kind == NodeKind.VARIABLE);
        this.emitNode(array, child);
        child = child.nextSibling;
      }
    }

    else if (node.kind == NodeKind.IF) {
      var branch = node.ifFalse();
      this.emitNode(array, node.ifValue());
      array.append(WASM_OPCODE_IF);
      this.emitNode(array, node.ifTrue());
      if (branch != null) {
        array.append(WASM_OPCODE_ELSE);
        this.emitNode(array, branch);
      }
      array.append(WASM_OPCODE_END);
    }

    else if (node.kind == NodeKind.HOOK) {
      this.emitNode(array, node.hookValue());
      array.append(WASM_OPCODE_IF);
      this.emitNode(array, node.hookTrue());
      array.append(WASM_OPCODE_ELSE);
      this.emitNode(array, node.hookFalse());
      array.append(WASM_OPCODE_END);
    }

    else if (node.kind == NodeKind.VARIABLE) {
      var value = node.variableValue();

      if (node.symbol.kind == SymbolKind.VARIABLE_LOCAL) {
        if (value != null) {
          this.emitNode(array, value);
        }

        // Default initialization
        else {
          array.append(WASM_OPCODE_I32_CONST);
          wasmWriteVarSigned(array, 0);
        }

        array.append(WASM_OPCODE_SET_LOCAL);
        wasmWriteVarUnsigned(array, node.symbol.offset);
      }

      else {
        assert(false);
      }
    }

    else if (node.kind == NodeKind.NAME) {
      var symbol = node.symbol;

      if (symbol.kind == SymbolKind.VARIABLE_ARGUMENT || symbol.kind == SymbolKind.VARIABLE_LOCAL) {
        array.append(WASM_OPCODE_GET_LOCAL);
        wasmWriteVarUnsigned(array, symbol.offset);
      }

      else if (symbol.kind == SymbolKind.VARIABLE_GLOBAL) {
        this.emitLoadFromMemory(array, symbol.resolvedType, null, WASM_MEMORY_INITIALIZER_BASE + symbol.offset);
      }

      else {
        assert(false);
      }
    }

    else if (node.kind == NodeKind.DEREFERENCE) {
      this.emitLoadFromMemory(array, node.resolvedType.underlyingType(this.context), node.unaryValue(), 0);
    }

    else if (node.kind == NodeKind.NULL) {
      array.append(WASM_OPCODE_I32_CONST);
      wasmWriteVarSigned(array, 0);
    }

    else if (node.kind == NodeKind.INT || node.kind == NodeKind.BOOL) {
      array.append(WASM_OPCODE_I32_CONST);
      wasmWriteVarSigned(array, node.intValue);
    }

    else if (node.kind == NodeKind.STRING) {
      array.append(WASM_OPCODE_I32_CONST);
      wasmWriteVarSigned(array, WASM_MEMORY_INITIALIZER_BASE + node.intValue);
    }

    else if (node.kind == NodeKind.CALL) {
      var value = node.callValue();
      var symbol = value.symbol;
      assert(isFunction(symbol.kind));

      var count = 0;
      // Write out the implicit "this" argument
      if (symbol.kind == SymbolKind.FUNCTION_INSTANCE) {
        this.emitNode(array, value.dotTarget());
        count = count + 1;
      }

      var child = value.nextSibling;
      while (child != null) {
        this.emitNode(array, child);
        count = count + 1;
        child = child.nextSibling;
      }

      array.append(symbol.node.functionBody() == null ? WASM_OPCODE_CALL_IMPORT : WASM_OPCODE_CALL);
      wasmWriteVarUnsigned(array, count);
      wasmWriteVarUnsigned(array, symbol.offset);
    }

    else if (node.kind == NodeKind.NEW) {
      var type = node.newType();
      var size = type.resolvedType.allocationSizeOf(this.context);

      // Pass the object size as the first argument
      assert(size > 0);
      array.append(WASM_OPCODE_I32_CONST);
      wasmWriteVarSigned(array, size);

      array.append(WASM_OPCODE_CALL);
      array.append(1);
      wasmWriteVarUnsigned(array, this.mallocFunctionIndex);
    }

    else if (node.kind == NodeKind.POSITIVE) {
      this.emitNode(array, node.unaryValue());
    }

    else if (node.kind == NodeKind.NEGATIVE) {
      array.append(WASM_OPCODE_I32_CONST);
      wasmWriteVarSigned(array, 0);
      this.emitNode(array, node.unaryValue());
      array.append(WASM_OPCODE_I32_SUB);
    }

    else if (node.kind == NodeKind.COMPLEMENT) {
      array.append(WASM_OPCODE_I32_CONST);
      wasmWriteVarSigned(array, ~0);
      this.emitNode(array, node.unaryValue());
      array.append(WASM_OPCODE_I32_XOR);
    }

    else if (node.kind == NodeKind.NOT) {
      this.emitNode(array, node.unaryValue());
      array.append(WASM_OPCODE_I32_EQZ);
    }

    else if (node.kind == NodeKind.CAST) {
      var value = node.castValue();
      var context = this.context;
      var from = value.resolvedType.underlyingType(context);
      var type = node.resolvedType.underlyingType(context);
      var fromSize = from.variableSizeOf(context);
      var typeSize = type.variableSizeOf(context);

      // The cast isn't needed if it's to a wider integer type
      if (from == type || fromSize < typeSize) {
        this.emitNode(array, value);
      }

      else {
        // Sign-extend
        if (type == context.sbyteType || type == context.shortType) {
          var shift = 32 - typeSize * 8;
          this.emitNode(array, value);
          array.append(WASM_OPCODE_I32_CONST);
          wasmWriteVarSigned(array, shift);
          array.append(WASM_OPCODE_I32_SHL);
          array.append(WASM_OPCODE_I32_CONST);
          wasmWriteVarSigned(array, shift);
          array.append(WASM_OPCODE_I32_SHR_S);
        }

        // Mask
        else if (type == context.byteType || type == context.ushortType) {
          this.emitNode(array, value);
          array.append(WASM_OPCODE_I32_CONST);
          wasmWriteVarSigned(array, type.integerBitMask(this.context) as int);
          array.append(WASM_OPCODE_I32_AND);
        }

        // No cast needed
        else {
          this.emitNode(array, value);
        }
      }
    }

    else if (node.kind == NodeKind.DOT) {
      var symbol = node.symbol;

      if (symbol.kind == SymbolKind.VARIABLE_INSTANCE) {
        this.emitLoadFromMemory(array, symbol.resolvedType, node.dotTarget(), symbol.offset);
      }

      else {
        assert(false);
      }
    }

    else if (node.kind == NodeKind.ASSIGN) {
      var left = node.binaryLeft();
      var right = node.binaryRight();
      var symbol = left.symbol;

      if (left.kind == NodeKind.DEREFERENCE) {
        this.emitStoreToMemory(array, left.resolvedType.underlyingType(this.context), left.unaryValue(), 0, right);
      }

      else if (symbol.kind == SymbolKind.VARIABLE_INSTANCE) {
        this.emitStoreToMemory(array, symbol.resolvedType, left.dotTarget(), symbol.offset, right);
      }

      else if (symbol.kind == SymbolKind.VARIABLE_GLOBAL) {
        this.emitStoreToMemory(array, symbol.resolvedType, null, WASM_MEMORY_INITIALIZER_BASE + symbol.offset, right);
      }

      else if (symbol.kind == SymbolKind.VARIABLE_ARGUMENT || symbol.kind == SymbolKind.VARIABLE_LOCAL) {
        this.emitNode(array, right);
        array.append(WASM_OPCODE_SET_LOCAL);
        wasmWriteVarUnsigned(array, symbol.offset);
      }

      else {
        assert(false);
      }
    }

    else if (node.kind == NodeKind.LOGICAL_AND) {
      this.emitNode(array, node.binaryLeft());
      array.append(WASM_OPCODE_IF);
      this.emitNode(array, node.binaryRight());
      array.append(WASM_OPCODE_ELSE);
      array.append(WASM_OPCODE_I32_CONST);
      wasmWriteVarSigned(array, 0);
      array.append(WASM_OPCODE_END);
    }

    else if (node.kind == NodeKind.LOGICAL_OR) {
      this.emitNode(array, node.binaryLeft());
      array.append(WASM_OPCODE_IF);
      array.append(WASM_OPCODE_I32_CONST);
      wasmWriteVarSigned(array, 1);
      array.append(WASM_OPCODE_ELSE);
      this.emitNode(array, node.binaryRight());
      array.append(WASM_OPCODE_END);
    }

    else {
      var isUnsigned = node.isUnsignedOperator();

      if (node.kind == NodeKind.ADD) {
        var left = node.binaryLeft();
        var right = node.binaryRight();

        this.emitNode(array, left);

        if (left.resolvedType.pointerTo == null) {
          this.emitNode(array, right);
        }

        // Need to multiply the right by the size of the pointer target
        else {
          assert(right.resolvedType.isInteger());
          var size = left.resolvedType.pointerTo.allocationSizeOf(this.context);

          if (size == 2) {
            if (right.kind == NodeKind.INT) {
              array.append(WASM_OPCODE_I32_CONST);
              wasmWriteVarSigned(array, right.intValue << 1);
            }

            else {
              this.emitNode(array, right);
              array.append(WASM_OPCODE_I32_CONST);
              wasmWriteVarSigned(array, 1);
              array.append(WASM_OPCODE_I32_SHL);
            }
          }

          else if (size == 4) {
            if (right.kind == NodeKind.INT) {
              array.append(WASM_OPCODE_I32_CONST);
              wasmWriteVarSigned(array, right.intValue << 2);
            }

            else {
              this.emitNode(array, right);
              array.append(WASM_OPCODE_I32_CONST);
              wasmWriteVarSigned(array, 2);
              array.append(WASM_OPCODE_I32_SHL);
            }
          }

          else {
            this.emitNode(array, right);
          }
        }

        array.append(WASM_OPCODE_I32_ADD);
      }

      else if (node.kind == NodeKind.BITWISE_AND) this.emitBinaryExpression(array, node, WASM_OPCODE_I32_AND);
      else if (node.kind == NodeKind.BITWISE_OR) this.emitBinaryExpression(array, node, WASM_OPCODE_I32_OR);
      else if (node.kind == NodeKind.BITWISE_XOR) this.emitBinaryExpression(array, node, WASM_OPCODE_I32_XOR);
      else if (node.kind == NodeKind.EQUAL) this.emitBinaryExpression(array, node, WASM_OPCODE_I32_EQ);
      else if (node.kind == NodeKind.MULTIPLY) this.emitBinaryExpression(array, node, WASM_OPCODE_I32_MUL);
      else if (node.kind == NodeKind.NOT_EQUAL) this.emitBinaryExpression(array, node, WASM_OPCODE_I32_NE);
      else if (node.kind == NodeKind.SHIFT_LEFT) this.emitBinaryExpression(array, node, WASM_OPCODE_I32_SHL);
      else if (node.kind == NodeKind.SUBTRACT) this.emitBinaryExpression(array, node, WASM_OPCODE_I32_SUB);

      else if (node.kind == NodeKind.DIVIDE) this.emitBinaryExpression(array, node, isUnsigned ? WASM_OPCODE_I32_DIV_U : WASM_OPCODE_I32_DIV_S);
      else if (node.kind == NodeKind.GREATER_THAN) this.emitBinaryExpression(array, node, isUnsigned ? WASM_OPCODE_I32_GT_U : WASM_OPCODE_I32_GT_S);
      else if (node.kind == NodeKind.GREATER_THAN_EQUAL) this.emitBinaryExpression(array, node, isUnsigned ? WASM_OPCODE_I32_GE_U : WASM_OPCODE_I32_GE_S);
      else if (node.kind == NodeKind.LESS_THAN) this.emitBinaryExpression(array, node, isUnsigned ? WASM_OPCODE_I32_LT_U : WASM_OPCODE_I32_LT_S);
      else if (node.kind == NodeKind.LESS_THAN_EQUAL) this.emitBinaryExpression(array, node, isUnsigned ? WASM_OPCODE_I32_LE_U : WASM_OPCODE_I32_LE_S);
      else if (node.kind == NodeKind.REMAINDER) this.emitBinaryExpression(array, node, isUnsigned ? WASM_OPCODE_I32_REM_U : WASM_OPCODE_I32_REM_S);
      else if (node.kind == NodeKind.SHIFT_RIGHT) this.emitBinaryExpression(array, node, isUnsigned ? WASM_OPCODE_I32_SHR_U : WASM_OPCODE_I32_SHR_S);

      else {
        assert(false);
      }
    }
  }

  getWasmType(type: Type): WasmType {
    var context = this.context;

    if (type == context.boolType || type.isInteger() || type.isReference()) {
      return WasmType.I32;
    }

    if (type == context.voidType) {
      return WasmType.VOID;
    }

    assert(false);
    return WasmType.VOID;
  }
}

function wasmPatchVarUnsigned(array: ByteArray, offset: int, value: int, maxValue: int): void {
  var current = value as uint;
  var max = maxValue as uint;
  while (true) {
    var element = current & 127;
    current = current >> 7;
    max = max >> 7;
    if (max != 0) {
      element = element | 128;
    }
    array.set(offset, element as byte);
    offset = offset + 1;
    if (max == 0) {
      break;
    }
  }
}

function wasmWriteVarUnsigned(array: ByteArray, value: int): void {
  var current = value as uint;
  while (true) {
    var element = current & 127;
    current = current >> 7;
    if (current != 0) {
      element = element | 128;
    }
    array.append(element as byte);
    if (current == 0) {
      break;
    }
  }
}

function wasmWriteVarSigned(array: ByteArray, value: int): void {
  while (true) {
    var element = value & 127;
    value = value >> 7;
    var done =
      value == 0 && (element & 64) == 0 ||
      value == -1 && (element & 64) != 0;
    if (!done) {
      element = element | 128;
    }
    array.append(element as byte);
    if (done) {
      break;
    }
  }
}

function wasmWriteLengthPrefixedASCII(array: ByteArray, value: string): void {
  var length = value.length;
  wasmWriteVarUnsigned(array, length);
  var index = array.length();
  array.resize(index + length);
  var i = 0;
  while (i < length) {
    array.set(index + i, value[i] as byte);
    i = i + 1;
  }
}

function wasmStartSection(array: ByteArray, name: string): int {
  wasmWriteLengthPrefixedASCII(array, name);
  var offset = array.length();
  wasmWriteVarUnsigned(array, ~0); // Section length, will be filled in later
  return offset;
}

function wasmFinishSection(array: ByteArray, offset: int): void {
  wasmPatchVarUnsigned(array, offset, array.length() - offset - 5, ~0);
}

function wasmWrapType(id: WasmType): WasmWrappedType {
  assert(id == WasmType.VOID || id == WasmType.I32);
  var type = new WasmWrappedType();
  type.id = id;
  return type;
}

class WasmSharedOffset {
  nextLocalOffset: int;
  intLocalCount: int;
}

function wasmAssignLocalVariableOffsets(node: Node, shared: WasmSharedOffset): void {
  if (node.kind == NodeKind.VARIABLE) {
    assert(node.symbol.kind == SymbolKind.VARIABLE_LOCAL);
    node.symbol.offset = shared.nextLocalOffset;
    shared.nextLocalOffset = shared.nextLocalOffset + 1;
    shared.intLocalCount = shared.intLocalCount + 1;
  }

  var child = node.firstChild;
  while (child != null) {
    wasmAssignLocalVariableOffsets(child, shared);
    child = child.nextSibling;
  }
}

function wasmEmit(compiler: Compiler): void {
  var module = new WasmModule();
  module.context = compiler.context;
  module.memoryInitializer = new ByteArray();

  // Set these to invalid values since "0" is valid
  module.mallocFunctionIndex = -1;
  module.currentHeapPointer = -1;
  module.originalHeapPointer = -1;

  // Emission requires two passes
  module.prepareToEmit(compiler.global);

  // The standard library must be included
  assert(module.mallocFunctionIndex != -1);
  assert(module.currentHeapPointer != -1);
  assert(module.originalHeapPointer != -1);

  compiler.outputWASM = new ByteArray();
  module.emitModule(compiler.outputWASM);
}
